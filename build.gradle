
group 'org.assertj'
version '0.0.6b'

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'java-gradle-plugin' // for test kit

sourceCompatibility = '1.8'

/*
  The configuration below shows the minimum properties
  required to publish to the plugin portal
*/
pluginBundle {
    website = 'https://github.com/assertj/assertj-generator-gradle-plugin'
    vcsUrl = 'https://github.com/assertj/assertj-generator-gradle-plugin'
    description = """Run the AssertJ generator against your source files to generate test sources."""
    tags = ['assertj', 'test', 'generator']

    plugins {
        assertJGeneratorPlugin {
            id = 'org.assertj.generator'
            displayName = 'AssertJ Generator Plugin'
        }
    }
}


task setupPluginUpload {
    if (System.env.CI && System.env.TRAVIS) {
        // Used for publishing from Travis

        final def KEY_PROPERTY = "gradle.publish.key"
        final def SECRET_PROPERTY = "gradle.publish.secret"

        def key = System.env.GRADLE_PUBLISH_KEY
        def secret = System.env.GRADLE_PUBLISH_SECRET

        key = key ? key : System.properties.getProperty(KEY_PROPERTY)
        secret = secret ? secret : System.properties.getProperty(SECRET_PROPERTY)

        if( !key || !secret)
        {
            throw new RuntimeException("GRADLE_PUBLISH_KEY and/or GRADLE_PUBLISH_SECRET are not defined environment variables")
        }

        System.properties.setProperty(KEY_PROPERTY, key)
        System.properties.setProperty(SECRET_PROPERTY, secret)
    }
}

tasks.publishPlugins.dependsOn tasks.setupPluginUpload

// Used by Gradle TestKit
gradlePlugin {
    plugins {
        assertJGeneratorPlugin {
            id = "org.assertj.generator"
            implementationClass = "org.assertj.generator.gradle.AssertJGeneratorGradlePlugin"
        }
    }
}

configurations {
    gradleRuntime
}


test {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
    }
}

idea {
    module {
        scopes.RUNTIME.plus += [ configurations.gradleRuntime ]
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    compile group: 'org.assertj', name: 'assertj-core', version: '3.8.0'

    // https://mvnrepository.com/artifact/org.assertj/assertj-assertions-generator
    compile group: 'org.assertj', name: 'assertj-assertions-generator', version: '2.0.0'

    // https://mvnrepository.com/artifact/com.google.guava/guava
    compile group: 'com.google.guava', name: 'guava', version: '20.0'

    testCompile gradleTestKit()
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }

    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.10"
        classpath "gradle.plugin.org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.5.2"
    }
}

